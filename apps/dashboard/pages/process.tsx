import { GetServerSidePropsContext, InferGetServerSidePropsType } from "next";
import Head from "next/head";

import { SelectedProvider, useSelected } from "@/components/context/SelectedProvider";
import { Dashboard } from "@/components/layouts/Dashboard";
import { fetchServer, fetchSettings } from "@/utils/fetchSSRProps";
import { Flex } from "@mantine/core";
import { ISetting } from "@pm2.web/typings";

import ProcessItem from "@/components/process/ProcessItem";
import useRefreshSSRProps from "@/components/hooks/useSSRPropsRefresh";

function Process({ settings }: { settings: ISetting }) {
  const { selectedProcesses } = useSelected();

  useRefreshSSRProps(settings.polling.frontend * 2);

  return (
    <Flex gap="xs" direction={"column"}>
      {selectedProcesses?.map((process) => <ProcessItem process={process} key={process._id} setting={settings} />)}
    </Flex>
  );
}

export default function ProcessPage({ servers, settings }: InferGetServerSidePropsType<typeof getServerSideProps>) {
  return (
    <>
      <Head>
        <title>pm2.web</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" type="image/png" href="/logo.png" />
      </Head>
      <SelectedProvider servers={servers}>
        <Dashboard>
          <Process settings={settings} />
        </Dashboard>
      </SelectedProvider>
    </>
  );
}

export async function getServerSideProps({ req, res }: GetServerSidePropsContext) {
  res.setHeader("Cache-Control", "s-maxage=10, stale-while-revalidate");

  const settings = await fetchSettings();
  return {
    props: {
      servers: await fetchServer(settings.excludeDaemon),
      settings,
    },
  };
}
