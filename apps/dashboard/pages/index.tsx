import uniqBy from "lodash/uniqBy";
import ms from "ms";
import { GetServerSidePropsContext, InferGetServerSidePropsType } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useRef, useState } from "react";

import { SelectedProvider, useSelected } from "@/components/context/SelectedProvider";
import { Dashboard } from "@/components/layouts/Dashboard";
import { StatsRing } from "@/components/stats/StatsRing";
import { fetchServer, fetchSettings } from "@/utils/fetchSSRProps";
import { Center, Flex, Paper, ScrollArea, SimpleGrid, Text } from "@mantine/core";
import { useQueue } from "@mantine/hooks";
import { IProcess, ISetting } from "@pm2.web/typings";
import { IconList } from "@tabler/icons-react";
import DashboardLog from "@/components/dashboard/DashboardLog";

function Home({ settings }: { settings: ISetting }) {
  const [stats, setStats] = useState<any | null>();
  const { servers, selectItem, selectedItem, selectedProcesses } = useSelected();
  const router = useRouter();

  return (
    <Flex direction={"column"} rowGap={"md"} flex={1}>
      <div>
        <SimpleGrid cols={{ base: 1, sm: 4 }}>
          <StatsRing
            stat={{
              label: "CPU",
              stats: `Server ~0%`,
              progress: 0,
              color: "blue",
              icon: "up",
            }}
          />
          <StatsRing
            stat={{
              label: "RAM",
              stats: `0 GB`,
              progress: 0,
              color: "teal",
              icon: "up",
            }}
          />
          <StatsRing
            stat={{
              label: "Uptime",
              stats: 0 + "",
              progress: 80,
              color: "#8377D1",
              icon: "up",
            }}
          />
          <StatsRing
            stat={{
              label: "Status",
              stats: `$0 online`,
              progress: 0,
              value: 0,
              color: "#93BEDF",
              icon: "up",
            }}
          />
        </SimpleGrid>
      </div>
      <DashboardLog refetchInterval={settings.polling.frontend} processIds={selectedProcesses.map((p) => p._id)} />
    </Flex>
  );
}

export default function HomePage({ servers, settings }: InferGetServerSidePropsType<typeof getServerSideProps>) {
  return (
    <>
      <Head>
        <title>pm2.web</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" type="image/png" href="/logo.png" />
      </Head>
      <SelectedProvider servers={servers}>
        <Dashboard>
          <Home settings={settings} />
        </Dashboard>
      </SelectedProvider>
    </>
  );
}

export async function getServerSideProps({ req, res }: GetServerSidePropsContext) {
  res.setHeader("Cache-Control", "s-maxage=10, stale-while-revalidate");

  return {
    props: {
      servers: await fetchServer(),
      settings: await fetchSettings(),
    },
  };
}
